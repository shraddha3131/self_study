 public class ConcurrentBankAccount {

    private double balance;

    public ConcurrentBankAccount(double initialBalance) {
        this.balance = initialBalance;
    }

    public synchronized void deposit(double amount) {
        balance += amount;
        System.out.println(Thread.currentThread().getName() + " deposited " + amount + ". New balance: " + balance);
    }

    public synchronized void withdraw(double amount) {
        if (balance >= amount) {
            balance -= amount;
            System.out.println(Thread.currentThread().getName() + " withdrew " + amount + ". New balance: " + balance);
        } else {
            System.out.println(Thread.currentThread().getName() + " insufficient funds to withdraw " + amount);
        }
    }

    public static void main(String[] args) {
        ConcurrentBankAccount account = new ConcurrentBankAccount(1000);

        // Deposit Threads
        Thread depositThread1 = new Thread(() -> account.deposit(200), "DepositThread1");
        Thread depositThread2 = new Thread(() -> account.deposit(300), "DepositThread2");

        // Withdrawal Threads
        Thread withdrawThread1 = new Thread(() -> account.withdraw(150), "WithdrawThread1");
        Thread withdrawThread2 = new Thread(() -> account.withdraw(1200), "WithdrawThread2"); // Try an overdraft

        depositThread1.start();
        depositThread2.start();
        withdrawThread1.start();
        withdrawThread2.start();
    }
}
 import java.util.Arrays;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveAction;

public class MultiThreadedSort {

    static class SortTask extends RecursiveAction {
        private int[] arr;
        private int start, end;

        public SortTask(int[] arr, int start, int end) {
            this.arr = arr;
            this.start = start;
            this.end = end;
        }

        @Override
        protected void compute() {
            if (end - start <= 16) { // Base case: small array, use sequential sort
                Arrays.sort(arr, start, end);
            } else {
                int mid = start + (end - start) / 2;
                SortTask leftTask = new SortTask(arr, start, mid);
                SortTask rightTask = new SortTask(arr, mid, end);
                invokeAll(leftTask, rightTask);
                merge(start, mid, end);
            }
        }

        private void merge(int start, int mid, int end) {
            int[] temp = new int[end - start];
            int i = start, j = mid, k = 0;
            while (i < mid && j < end) {
                if (arr[i] <= arr[j]) {
                    temp[k++] = arr[i++];
                } else {
                    temp[k++] = arr[j++];
                }
            }
            while (i < mid) temp[k++] = arr[i++];
            while (j < end) temp[k++] = arr[j++];
            System.arraycopy(temp, 0, arr, start, end - start);
        }
    }

    public static void main(String[] args) {
        int[] arr = {5, 2, 9, 1, 5, 6, 3, 8, 7, 4};
        ForkJoinPool pool = new ForkJoinPool();
        pool.invoke(new SortTask(arr, 0, arr.length));
        System.out.println("Sorted array: " + Arrays.toString(arr));
    }
}